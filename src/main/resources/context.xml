<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
			http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd">

	<!-- SPRING SETUP -->

	<!-- Load properties so we can easily change them -->
	<context:property-placeholder
		location="classpath:application.properties" />

	<!-- Enable Annotation Configuration in order to automatically scan controllers -->
	<context:annotation-config />


	<!-- Allow @Transactional annotations for transaction management -->
	<tx:annotation-driven
		transaction-manager="transactionManager" />

	<!-- Search for Rest Resources and configure them automatically -->
	<context:component-scan
		base-package="com.medintu.samplingkit.resources" />

	<!-- DATABASE SETUP -->

	<bean id="dataSource"
		class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="username" value="${db.username}" />
		<property name="password" value="${db.password}" />
		<property name="driverClassName" value="${db.driver}" />
		<property name="url" value="${db.url}" />
	</bean>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="persistenceUnitName" value="examplePU" />
		<property name="jpaVendorAdapter">
			<bean
				class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="generateDdl" value="true" />
				<property name="showSql" value="true" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
			</props>
		</property>
	</bean>


	<bean id="mailSender"
		class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${mail.host}" />
		<property name="port" value="${mail.port}" />
		<property name="username" value="${mail.username}" />
		<property name="password" value="${mail.password}" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.ssl.trust">${mail.host}</prop>
				<prop key="mail.smtp.starttls.enable">${mail.starttls.enable}</prop>
				<prop key="mail.smtp.auth">${mail.auth}</prop>
			</props>
		</property>
	</bean>


	<bean id="emailTemplate"
		class="org.springframework.mail.SimpleMailMessage">
		<property name="from" value="${mail.username}" />
		<property name="subject" value="${mail.subject}" />
		<property name="text">
			<value>
		<![CDATA[
                    Hi %s,

                    Thank You for registering for HIV test kit. You can track the kit with your unique Order Code Id.

                    Regards,
                    %s.
		]]>
			</value>
		</property>
	</bean>


	<bean id="transactionManager"
		class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory"
			ref="entityManagerFactory" />
	</bean>

	<!-- Dao class related to SamplingKit -->

	<bean id="testCodeDao"
		class="com.medintu.samplingkit.dao.JpaTestCodeDao" />
	<bean id="sponsorDao"
		class="com.medintu.samplingkit.dao.JpaSponsorDao" />
	<bean id="statusDao"
		class="com.medintu.samplingkit.dao.JpaStatusDao" />
	<bean id="endUserDao"
		class="com.medintu.samplingkit.dao.JpaEndUserDao" />
	<bean id="addressDao"
		class="com.medintu.samplingkit.dao.JpaSponsorAddressDao" />

	<bean id="sponsorUserDao"
		class="com.medintu.samplingkit.dao.JpaSponsorUserDao" />
	<bean id="specialEventDao"
		class="com.medintu.samplingkit.dao.JpaSpecialEventDao" />
	<bean id="ethnicGroupdao"
		class="com.medintu.samplingkit.dao.JpaEthnicGroupDao" />
	<bean id="postalCodeDao"
		class="com.medintu.samplingkit.dao.JpaPostalCodeDao" />
	<bean id="endUserTestsDao"
		class="com.medintu.samplingkit.dao.JpaEndUserTestsDao"></bean>
	<!-- Service class related to SamplingKit -->
	<bean id="sponsorAddressDao"
		class="com.medintu.samplingkit.dao.JpaSponsorAddressDao"></bean>
	<bean id="sponsorPostlcodeDao"
		class="com.medintu.samplingkit.dao.JpaSponsorPostlcodeDao"></bean>
	<bean id="ruleDao" class="com.medintu.samplingkit.dao.JpaRuleDao" />
	<bean id="testResultdao"
		class="com.medintu.samplingkit.dao.JpaTestResultDao" />
	<bean id="sponsorSpentDao"
		class="com.medintu.samplingkit.dao.JpaSponsorSpentDao" />
	<bean id="ruleEthnicGroupDao"
		class="com.medintu.samplingkit.dao.JpaRuleEthnicGroupDao" />
	<bean id="ruleTestCodeDao"
		class="com.medintu.samplingkit.dao.JpaRuleTestCodeDao" />


	<bean id="tesCodeService"
		class="com.medintu.samplingkit.service.TestCodeServiceImpl" />
	<bean id="sponsorService"
		class="com.medintu.samplingkit.service.SponsorServiceImpl" />
	<bean id="statusService"
		class="com.medintu.samplingkit.service.StatusServiceImpl" />
	<bean id="endUserService"
		class="com.medintu.samplingkit.service.impl.EndUserServiceImpl" />

	<bean id="ethnicgroupservice"
		class="com.medintu.samplingkit.service.EthnicGroupServiceImpl" />
	<bean id="specialEventService"
		class="com.medintu.samplingkit.service.SpecialEventServiceImpl" />
	<bean id="PostalCodeService"
		class="com.medintu.samplingkit.service.PostalCodeServiceImpl" />
	<bean id="sponsorUserService"
		class="com.medintu.samplingkit.service.SponsorUserServiceImpl">
		<constructor-arg ref="sponsorUserDao" />
		<constructor-arg ref="passwordEncoder" />
	</bean>
	<bean id="ruleService"
		class="com.medintu.samplingkit.service.RuleServiceImpl" />
	<bean id="testResultService"
		class="com.medintu.samplingkit.service.impl.TestResultServiceImpl" />
	<!-- Dao class related to trafficApp -->

	<bean id="userDao" class="com.medintu.samplingkit.dao.JpaUserDao" />
	<bean id="accessTokenDao"
		class="com.medintu.samplingkit.dao.JpaAccessTokenDao" />

	<bean id="userService"
		class="com.medintu.samplingkit.service.impl.DaoUserService">
		<constructor-arg ref="userDao" />
		<constructor-arg ref="accessTokenDao" />
	</bean>

	<bean id="userConfiguration"
		class="com.medintu.samplingkit.entity.EndUserConfiguration" />

	<bean id="mailService"
		class="com.medintu.samplingkit.service.impl.MailSenderImpl" />

	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="5"></property>
		<property name="maxPoolSize" value="10"></property>
		<property name="queueCapacity" value="40"></property>
		<property name="waitForTasksToCompleteOnShutdown"
			value="true"></property>
	</bean>


	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename">
			<value>messages</value>
		</property>
	</bean>

	<bean id="dataBaseInitializer"
		class="com.medintu.samplingkit.dao.DataBaseInitializer"
		init-method="initDataBase">
		<constructor-arg ref="userDao" />
		<constructor-arg ref="passwordEncoder" />
	</bean>



	<bean class="com.medintu.samplingkit.service.impl.DbCompareTask"
		id="dbCompareTask" />
	<!-- Spring Quartz -->
	<bean
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean"
		name="dbcompareJob">
		<!-- org.springframework.scheduling.quartz.JobDetailBean" -->
		<property
			value="com.medintu.samplingkit.service.impl.JobScheduler"
			name="jobClass" />
		<property name="jobDataAsMap">
			<map>
				<entry key="dbCompareTask" value-ref="dbCompareTask" />
			</map>
		</property>
		<property value="true" name="durability" />
	</bean>

	<!-- simple trigger specify repeat interval and delay time -->
	<bean
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"
		id="dbCompareTrigger">
		<!-- org.springframework.scheduling.quartz.SimpleTriggerBean -->
		<property name="jobDetail" ref="dbcompareJob" />
		<property name="cronExpression" value=" 0 0 15 ? * * *" />
		<!-- <property value="600000" name="repeatInterval" />
		<property value="1000" name="startDelay" /> -->
	</bean>

	<!-- scheduler factory bean to bind,the executing code and time intervalstogether -->
	<bean
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="jobDetails">
			<list>
				<ref bean="dbcompareJob" />
			</list>
		</property>
		<property name="triggers">
			<list>
				<ref bean="dbCompareTrigger" />
			</list>
		</property>
	</bean>

	<!-- INIT REST COMPONENTS -->

	<bean id="objectMapper"
		class="com.fasterxml.jackson.databind.ObjectMapper" />

	<!-- SPRING SECURITY SETUP -->

	<bean id="passwordEncoder"
		class="org.springframework.security.crypto.password.StandardPasswordEncoder">
		<constructor-arg value="${app.secret}" />
	</bean>

	<!-- Enabling User Authentication Setup -->

	<security:authentication-manager
		id="authenticationManager">
		<security:authentication-provider
			user-service-ref="userService">

			<security:password-encoder
				ref="passwordEncoder" />
		</security:authentication-provider>
	</security:authentication-manager>

	<security:http entry-point-ref="unauthorizedEntryPoint"
		authentication-manager-ref="authenticationManager"
		create-session="stateless">
		<security:csrf disabled="true" />
		<security:custom-filter
			ref="authenticationTokenProcessingFilter" position="PRE_AUTH_FILTER" />
		<security:intercept-url
			pattern="/rest/user/authenticate" access="permitAll" />
		<security:intercept-url method="GET"
			pattern="/rest/blogposts/**" access="hasRole('USER')" />
		<security:intercept-url method="PUT"
			pattern="/rest/blogposts/**" access="hasRole('ADMIN')" />
		<security:intercept-url method="POST"
			pattern="/rest/blogposts/**" access="hasRole('ADMIN')" />
		<security:intercept-url method="DELETE"
			pattern="/rest/blogposts/**" access="hasRole('ADMIN')" />
	</security:http>

	<bean id="unauthorizedEntryPoint"
		class="com.medintu.samplingkit.rest.UnauthorizedEntryPoint" />

	<bean id="authenticationTokenProcessingFilter"
		class="com.medintu.samplingkit.rest.AuthenticationTokenProcessingFilter">
		<constructor-arg ref="userService" />
	</bean>

	<!-- <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 
		max upload size in bytes <property name="maxUploadSize" value="20971520" 
		/> max size of file in memory (in bytes) <property name="maxInMemorySize" 
		value="1048576" /> 1MB </bean> -->

</beans>
